# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# networks:
#   hatsuon-network:
#     external: true

services:
  frontend:
    build:
      context: ./svelte-kit
    environment:
      NODE_ENV: production
    ports:
      - 5173:3000
    volumes:
      - ./src:/app/src
      - ./static:/app/static
      - ./vite.config.js:/app/vite.config.js
      - ./tsconfig.json:/app/tsconfig.json
      - ./svelte.config.js:/app/svelte.config.js
    # networks:
    #   - hatsuon-network


  # nginx:
  #   restart: always
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./nginx
  #   ports:
  #     - 80:80
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #   #   - ./:/var/www
  #   depends_on:
  #     - frontend
  #   networks:
  #     - hatsuon-network

  backend:
    build: .
    ports:
      - 8000:8000
    tty: true
    secrets:
      - django-secret-key
    environment:
      - SECRET_KEY=/run/secrets/django-secret-key
      - DEBUG=False
      - CSRF_TRUSTED_ORIGINS=http://0.0.0.0:8000,pronounciation-app-backend.onrender.com
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - ALLOWED_HOSTS=127.0.0.1,localhost,hatsuon_app,0.0.0.0,pronounciation-app-backend.onrender.com
      - CORS_ALLOWED_ORIGINS=http://localhost,https://pronounciation-app.onrender.com,https://pronounciation-app-backend.onrender.coms
    depends_on:
      db:
        condition: service_healthy
    # networks:
    #   - hatsuon-network

  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_HOST_AUTH_METHOD=trust
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  db-data:
secrets:
  db-password:
    file: passwords/db_password.txt
  django-secret-key:
    file: passwords/django_secret_key.txt